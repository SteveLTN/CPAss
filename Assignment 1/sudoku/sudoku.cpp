#include <gecode/int.hh>
#include <gecode/search.hh>

using namespace Gecode;

class Sudoku : public Space {
protected:
  IntVarArray units;
  IntVarArray block[3][3];
  IntVarArray rows[9];
  IntVarArray columns[9];
public:
  Sudoku(int given_units[9][9]) : units(*this, 81) {
    // copy the given units into our variable unit
    int i,j,s,t,k;
    for(i=0; i<9; i++) {
      for(j=0; j<9; j++) {
        // if the number is given, we just use a variable whose lower bound and upper bound are the same
        if(given_units[i][j] != 0)
          units[i*9 + j] = IntVar(*this, given_units[i][j], given_units[i][j]);
        else
          units[i*9 + j] = IntVar(*this, 1, 9);
      }
    }
    

    // distinct in columns
    for(i=0; i<9; i++) {
      columns[i] = IntVarArray(*this, 9);
      for(j=0; j<9; j++) {
        columns[i][j] = units[i*9 + j];
      }
      distinct(*this, columns[i], ICL_DOM);
    }

    // distinct in rows
    for(j=0; j<9; j++) {
      rows[j] = IntVarArray(*this, 9);
      for(i=0; i<9; i++) {
        rows[j][i] = units[i*9 + j];
      }
      distinct(*this, rows[j]);
    }

    // distinct in blocks
    for(s=0; s<3; s++) {
      for(t=0; t<3; t++) {
        block[s][t] = IntVarArray(*this, 9);
        for(i=s*3, k=0; i<s*3+3; i++){
          for(j=t*3; j<t*3+3; j++, k++){
            block[s][t][k] = units[i*9 + j];
          }
        }
        distinct(*this, block[s][t]);
      }
    }

    // branching
    branch(*this, units, INT_VAR_SIZE_MIN(), INT_VAL_MIN());
  }
  
  Sudoku(bool share, Sudoku& s) : Space(share, s){
    units.update(*this, share, s.units);
  }
  virtual Space* copy(bool share) {
    return new Sudoku(share,*this);
  }
  void print() const {
    int i,j;
    for(i=0; i<9; i++) {
      for(j=0; j<9; j++) {
        std::cout << units[i*9 + j] << " ";
        if (j%3 == 2)
          std::cout << " ";
      }
      std::cout << std::endl;
      if (i%3 == 2)
        std::cout << std::endl;
    }
  }
};

int main(int argc, char* argv[]) {
  static int examples[][9][9] = {
    {
      {0,0,0, 2,0,5, 0,0,0},
      {0,9,0, 0,0,0, 7,3,0},
      {0,0,2, 0,0,9, 0,6,0},
	
      {2,0,0, 0,0,0, 4,0,9},
      {0,0,0, 0,7,0, 0,0,0},
      {6,0,9, 0,0,0, 0,0,1},
    
      {0,8,0, 4,0,0, 1,0,0},
      {0,6,3, 0,0,0, 0,8,0},
      {0,0,0, 6,0,8, 0,0,0}
    },{
      {3,0,0, 9,0,4, 0,0,1},
      {0,0,2, 0,0,0, 4,0,0},
      {0,6,1, 0,0,0, 7,9,0},

      {6,0,0, 2,4,7, 0,0,5},
      {0,0,0, 0,0,0, 0,0,0},
      {2,0,0, 8,3,6, 0,0,4},
    
      {0,4,6, 0,0,0, 2,3,0},
      {0,0,9, 0,0,0, 6,0,0},
      {5,0,0, 3,0,9, 0,0,8}
    },{
      {0,0,0, 0,1,0, 0,0,0},
      {3,0,1, 4,0,0, 8,6,0},
      {9,0,0, 5,0,0, 2,0,0},
    
      {7,0,0, 1,6,0, 0,0,0},
      {0,2,0, 8,0,5, 0,1,0},
      {0,0,0, 0,9,7, 0,0,4},
    
      {0,0,3, 0,0,4, 0,0,6},
      {0,4,8, 0,0,6, 9,0,7},
      {0,0,0, 0,8,0, 0,0,0}
    },{	// Fiendish puzzle April 21, 2005 Times London
      {0,0,4, 0,0,3, 0,7,0},
      {0,8,0, 0,7,0, 0,0,0},
      {0,7,0, 0,0,8, 2,0,5},
    
      {4,0,0, 0,0,0, 3,1,0},
      {9,0,0, 0,0,0, 0,0,8},
      {0,1,5, 0,0,0, 0,0,4},
    
      {1,0,6, 9,0,0, 0,3,0},
      {0,0,0, 0,2,0, 0,6,0},
      {0,2,0, 4,0,0, 5,0,0}
    },{	// This one requires search
      {0,4,3, 0,8,0, 2,5,0},
      {6,0,0, 0,0,0, 0,0,0},
      {0,0,0, 0,0,1, 0,9,4},
    
      {9,0,0, 0,0,4, 0,7,0},
      {0,0,0, 6,0,8, 0,0,0},
      {0,1,0, 2,0,0, 0,0,3},
    
      {8,2,0, 5,0,0, 0,0,0},
      {0,0,0, 0,0,0, 0,0,5},
      {0,3,4, 0,9,0, 7,1,0}
    },{	// Hard one from http://www.cs.mu.oz.au/671/proj3/node5.html
      {0,0,0, 0,0,3, 0,6,0},
      {0,0,0, 0,0,0, 0,1,0},
      {0,9,7, 5,0,0, 0,8,0},

      {0,0,0, 0,9,0, 2,0,0},
      {0,0,8, 0,7,0, 4,0,0},
      {0,0,3, 0,6,0, 0,0,0},

      {0,1,0, 0,0,2, 8,9,0},
      {0,4,0, 0,0,0, 0,0,0},
      {0,5,0, 1,0,0, 0,0,0}
    },{ // Puzzle 1 from http://www.sudoku.org.uk/bifurcation.htm
      {1,0,0, 9,0,7, 0,0,3},
      {0,8,0, 0,0,0, 0,7,0},
      {0,0,9, 0,0,0, 6,0,0},
      {0,0,7, 2,0,9, 4,0,0},
      {4,1,0, 0,0,0, 0,9,5},
      {0,0,8, 5,0,4, 3,0,0},
      {0,0,3, 0,0,0, 7,0,0},
      {0,5,0, 0,0,0, 0,4,0},
      {2,0,0, 8,0,6, 0,0,9}
    },{ // Puzzle 2 from http://www.sudoku.org.uk/bifurcation.htm
      {0,0,0, 3,0,2, 0,0,0},
      {0,5,0, 7,9,8, 0,3,0},
      {0,0,7, 0,0,0, 8,0,0},
      {0,0,8, 6,0,7, 3,0,0},
      {0,7,0, 0,0,0, 0,6,0},
      {0,0,3, 5,0,4, 1,0,0},
      {0,0,5, 0,0,0, 6,0,0},
      {0,2,0, 4,1,9, 0,5,0},
      {0,0,0, 8,0,6, 0,0,0}
    },{ // Puzzle 3 from http://www.sudoku.org.uk/bifurcation.htm
      {0,0,0, 8,0,0, 0,0,6},
      {0,0,1, 6,2,0, 4,3,0},
      {4,0,0, 0,7,1, 0,0,2},
      {0,0,7, 2,0,0, 0,8,0},
      {0,0,0, 0,1,0, 0,0,0},
      {0,1,0, 0,0,6, 2,0,0},
      {1,0,0, 7,3,0, 0,0,4},
      {0,2,6, 0,4,8, 1,0,0},
      {3,0,0, 0,0,5, 0,0,0}
    },{ // Puzzle 4 from http://www.sudoku.org.uk/bifurcation.htm
      {3,0,5, 0,0,4, 0,7,0},
      {0,7,0, 0,0,0, 0,0,1},
      {0,4,0, 9,0,0, 0,3,0},
      {4,0,0, 0,5,1, 0,0,6},
      {0,9,0, 0,0,0, 0,4,0},
      {2,0,0, 8,4,0, 0,0,7},
      {0,2,0, 0,0,7, 0,6,0},
      {8,0,0, 0,0,0, 0,9,0},
      {0,6,0, 4,0,0, 2,0,8}
    },{ // Puzzle 5 from http://www.sudoku.org.uk/bifurcation.htm
      {0,0,0, 7,0,0, 3,0,0},
      {0,6,0, 0,0,0, 5,7,0},
      {0,7,3, 8,0,0, 4,1,0},
      {0,0,9, 2,8,0, 0,0,0},
      {5,0,0, 0,0,0, 0,0,9},
      {0,0,0, 0,9,3, 6,0,0},
      {0,9,8, 0,0,7, 1,5,0},
      {0,5,4, 0,0,0, 0,6,0},
      {0,0,1, 0,0,9, 0,0,0}
    },{ // Puzzle 6 from http://www.sudoku.org.uk/bifurcation.htm
      {0,0,0, 6,0,0, 0,0,4},
      {0,3,0, 0,9,0, 0,2,0},
      {0,6,0, 8,0,0, 7,0,0},
      {0,0,5, 0,6,0, 0,0,1},
      {6,7,0, 3,0,1, 0,5,8},
      {9,0,0, 0,5,0, 4,0,0},
      {0,0,6, 0,0,3, 0,9,0},
      {0,1,0, 0,8,0, 0,6,0},
      {2,0,0, 0,0,6, 0,0,0}
    },{ // Puzzle 7 from http://www.sudoku.org.uk/bifurcation.htm
      {8,0,0, 0,0,1, 0,4,0},
      {2,0,6, 0,9,0, 0,1,0},
      {0,0,9, 0,0,6, 0,8,0},
      {1,2,4, 0,0,0, 0,0,9},
      {0,0,0, 0,0,0, 0,0,0},
      {9,0,0, 0,0,0, 8,2,4},
      {0,5,0, 4,0,0, 1,0,0},
      {0,8,0, 0,7,0, 2,0,5},
      {0,9,0, 5,0,0, 0,0,7}
    },{ // Puzzle 8 from http://www.sudoku.org.uk/bifurcation.htm
      {6,5,2, 0,4,8, 0,0,7},
      {0,7,0, 2,0,5, 4,0,0},
      {0,0,0, 0,0,0, 0,0,0},
      {0,6,4, 1,0,0, 0,7,0},
      {0,0,0, 0,8,0, 0,0,0},
      {0,8,0, 0,0,4, 5,6,0},
      {0,0,0, 0,0,0, 0,0,0},
      {0,0,8, 6,0,7, 0,2,0},
      {2,0,0, 8,9,0, 7,5,1}
    },{ // Puzzle 9 from http://www.sudoku.org.uk/bifurcation.htm
      {0,0,6, 0,0,2, 0,0,9},
      {1,0,0, 5,0,0, 0,2,0},
      {0,4,7, 3,0,6, 0,0,1},
      {0,0,0, 0,0,8, 0,4,0},
      {0,3,0, 0,0,0, 0,7,0},
      {0,1,0, 6,0,0, 0,0,0},
      {4,0,0, 8,0,3, 2,1,0},
      {0,6,0, 0,0,1, 0,0,4},
      {3,0,0, 4,0,0, 9,0,0}
    },{ // Puzzle 10 from http://www.sudoku.org.uk/bifurcation.htm
      {0,0,4, 0,5,0, 9,0,0},
      {0,0,0, 0,7,0, 0,0,6},
      {3,7,0, 0,0,0, 0,0,2},
      {0,0,9, 5,0,0, 0,8,0},
      {0,0,1, 2,0,4, 3,0,0},
      {0,6,0, 0,0,9, 2,0,0},
      {2,0,0, 0,0,0, 0,9,3},
      {1,0,0, 0,4,0, 0,0,0},
      {0,0,6, 0,2,0, 7,0,0}
    },{ // Puzzle 11 from http://www.sudoku.org.uk/bifurcation.htm
      {0,0,0, 0,3,0, 7,9,0},
      {3,0,0, 0,0,0, 0,0,5},
      {0,0,0, 4,0,7, 3,0,6},
      {0,5,3, 0,9,4, 0,7,0},
      {0,0,0, 0,7,0, 0,0,0},
      {0,1,0, 8,2,0, 6,4,0},
      {7,0,1, 9,0,8, 0,0,0},
      {8,0,0, 0,0,0, 0,0,1},
      {0,9,4, 0,1,0, 0,0,0}
    },{ // From http://www.sudoku.org.uk/discus/messages/29/51.html?1131034031
      {2,5,8, 1,0,4, 0,3,7},
      {9,3,6, 8,2,7, 5,1,4},
      {4,7,1, 5,3,0, 2,8,0},

      {7,1,5, 2,0,3, 0,4,0},
      {8,4,9, 6,7,5, 3,2,1},
      {3,6,2, 4,1,0, 0,7,5},

      {1,2,4, 9,0,0, 7,5,3},
      {5,9,3, 7,4,2, 1,6,8},
      {6,8,7, 3,5,1, 4,9,2}
    }
  };
  Sudoku* m;
  int i;
  for(i=0; i< (sizeof(examples) / sizeof(examples[0])); i++) {
    m = new Sudoku(examples[i]);
    DFS<Sudoku> e(m);
    delete m;
    while (Sudoku* s = e.next()) {
      s->print(); delete s;
    }
    
    std::cout << "===================" << std::endl;
  }
  return 0;
}